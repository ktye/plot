#include<stdio.h>
#include<io.h>
#include<stdlib.h>
#include<stddef.h>
#include<string.h>
#include<math.h>
typedef void V;
typedef double F;
typedef int32_t I;
typedef int64_t J;
V help() {   // echo "disable r" >> ~/.zshrc
	printf("random numbers                          \n");
	printf("r       N(env) float [0,1]              \n");
	printf("r 3     N=3                             \n");
	printf("r n            float normal distribution\n");
	printf("r 3n                                    \n");
	printf("r 100z         complex binormal         \n");
	exit(1);
}
uint32_t r = 314159265;
uint32_t rng() {
	r ^= r<<13;
	r ^= r>>17;
	r ^= r<<5;
	return r;
}
V randn(F* x, F* y) {
	F u, v, s = 0.0;
	while (s==0.0||s>=1) {
		u = ((F)rng()/(F)(0xffffffff))*2.0-1.0;
		v = ((F)rng()/(F)(0xffffffff))*2.0-1.0;
		s = u*u+v*v;
	}	
	s = sqrt(-2*log(s)/s);
	*x=u*s; *y=v*s;
}
I ispipe() { return !isatty(fileno(stdin)); }
I line() {
	I n = 1024;
	char b[n];
	if(!fgets(b, n, stdin))             return 0;
	b[strlen(b)-1] = 0; printf("%s ", b); return 1;
}
V out(I u, I z) {
	F x, y, a, p;
	if(u) x = ((F)rng()/(F)(0xffffffff))*2.0-1.0;
	else  randn(&x, &y);
	if(z) {
		a = sqrt(x*x+y*y);
		p = atan2(y, x)*180.0/M_PI;
		if(p<0) p+=360.0;
		printf("%ga%g\n", a, p);
	} else  printf("%g\n", x);
}
int main(int args, char **argv) {
	int i;
	char *l;
	int n, u=1, z=0;
	n = atoi(getenv("N"));
	if(args>1) {
		if(argv[1][0] == '-') help();
		l = &(argv[1][strlen(argv[1])-1]);
		if(*l == 'n'){u=0; *l=0;}
		if((*l == 'a')||(*l == 'z')){z=1; *l=0;}
		if(strlen(argv[1])) n = atoi(argv[1]);
	}
	if(n<=0) exit(1);
	if(ispipe())  while(line())      out(u, z);
	else          for(i=0; i<n; i++) out(u, z);
}
